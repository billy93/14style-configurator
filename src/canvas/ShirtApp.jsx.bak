import * as THREE from 'three'
import { useEffect, useRef, useState } from 'react'
import { Canvas, useFrame, useThree } from '@react-three/fiber'
import { useGLTF, useTexture, OrbitControls, PivotControls, AccumulativeShadows, RandomizedLight, Decal } from '@react-three/drei'
import { useControls } from 'leva'
import { useSnapshot } from 'valtio';
import state from '../store'
import { easing } from 'maath'
import { useKeyboard } from '../components/useKeyboard'

const ShirtApp = (props) => (
  <Cup onRightClick={props.onRightClick}/>
  // <Canvas shadows orthographic camera={{ position: [0, 10, 100], zoom: 140 }} style={{height:'100vh'}}>
  //   <ambientLight intensity={0.5 * Math.PI} />
  //   <directionalLight intensity={0.5} position={[10, 10, 10]} />
  //   <Cup scale={2} position={[0, -1, 0]} />
  //   <AccumulativeShadows temporal frames={100} alphaTest={0.95} opacity={1} scale={25} position={[0, -1, 0]}>
  //     <RandomizedLight amount={8} radius={10} ambient={0.7} position={[10, 10, -5]} bias={0.01} size={10} />
  //   </AccumulativeShadows>
  //   <OrbitControls makeDefault />
  // </Canvas>
)

function Cup(props) {
  const { scene, camera } = useThree();
  const snap = useSnapshot(state);
  const stateString = JSON.stringify(snap);

  const meshRef = useRef();
  const [pos, setXYZ] = useState(snap.frontLogoPosition)
  const [rot, setRot] = useState(snap.frontLogoRotation)
  const [scl, setScl] = useState(snap.frontLogoScale)

  const [pos2, setXYZ2] = useState(snap.frontLogoPosition2)
  const [rot2, setRot2] = useState(snap.frontLogoRotation2)
  const [scl2, setScl2] = useState(snap.frontLogoScale2)

  const [clickPosition, setClickPosition] = useState(null); // Store click position

  const keyboard = useKeyboard();

  const raycaster = new THREE.Raycaster();
  const mouse = new THREE.Vector2();

  // This state will control showing the context menu
  const [showContextMenu, setShowContextMenu] = useState(false);


  // Function to handle right-click
  const handleContextMenu = (event) => {
    //event.preventDefault();

    // Get mouse position in normalized device coordinates
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = -(event.clientY / window.innerHeight) * 2 + 1;

    // Update the raycaster with the camera and mouse position
    raycaster.setFromCamera(mouse, camera);

    // Check if the ray intersects the mesh
    const intersects = raycaster.intersectObject(meshRef.current);
    if (intersects.length > 0) {
      const point = intersects[0].point; // This is the clicked 3D position

     // Store the clicked 3D position
     setClickPosition(point);

     // Pass the position to the parent to trigger the context menu in HTML
     props.onRightClick(event.clientX, event.clientY);
    }
  };

  // Function to apply decal based on image selection
  const handleSelectImage = (image) => {
    setSelectedImage(image);
    // setShowContextMenu(false);
  };
  
  useFrame((state, delta) => easing.dampC(materials.lambert1.color, snap.color, 0.25, delta));


  // console.log(stateString)
  const { nodes, materials } = useGLTF('/shirt.glb')
  const { debug, image, scale, debug2, image2, scale2 } = useControls({
    debug: false,
    image: { image: '/threejs.png' },
    scale: {
      value: snap.frontLogoScale, // Nilai default skala
      step: 0.01,        // Langkah pergerakan setiap kali slider diubah
      min: 0.01,         // Batas minimum
      max: 5,           // Batas maksimum
    },
    debug2: false,
    image2: { image: '/1200px-Starbucks_Logo_ab_2011.svg.png'},
    scale2: {
      value: snap.frontLogoScale2, // Nilai default skala
      step: 0.01,        // Langkah pergerakan setiap kali slider diubah
      min: 0.01,         // Batas minimum
      max: 5,           // Batas maksimum
    },
  })

  
  useFrame((s, delta) => {
    
    // Input movement based on WASD keys
    const speed = 0.002; // Movement speed

    if (keyboard['w']) {
      if(debug){
        let value = [pos[0], pos[1] + speed, pos[2]]
        setXYZ(value); // Move decal up (positive y-axis)
        state.frontLogoPosition = value
      }
      if(debug2){
        let value = [pos2[0], pos2[1] + speed, pos2[2]]
        setXYZ2(value); // Move decal up (positive y-axis)
        state.frontLogoPosition2 = value;
      }
    }
    if (keyboard['s']) {
      if(debug){
        let value = [pos[0], pos[1] - speed, pos[2]]
        setXYZ(value); // Move decal up (positive y-axis)
        state.frontLogoPosition = value

      }
      if(debug2){
        let value = [pos2[0], pos2[1] - speed, pos2[2]]
        setXYZ2(value); // Move decal up (positive y-axis)
        state.frontLogoPosition = value
      }
    }
    if (keyboard['a']) {
      if(debug){
        let value = [pos[0] - speed, pos[1], pos[2]]
        setXYZ(value); // Move decal up (positive y-axis)
        state.frontLogoPosition = value
      }
      if(debug2){
        let value = [pos2[0] - speed, pos2[1], pos2[2]]        
        setXYZ2(value); // Move decal up (positive y-axis)
        state.frontLogoPosition = value
      }
    }
    if (keyboard['d']) {
      if(debug){
        let value = [pos[0] + speed, pos[1], pos[2]]
        setXYZ(value); // Move decal up (positive y-axis)
        state.frontLogoPosition = value
      }
      if(debug2){
        let value = [pos2[0] + speed, pos2[1], pos2[2]]
        setXYZ2(value); // Move decal up (positive y-axis)
        state.frontLogoPosition = value
      }
    }
  });

    useEffect(() => {
      state.frontLogoScale = scale;
      setScl(scale)
    }, [scale]);

     useEffect(() => {
      state.frontLogoScale2 = scale2;
      setScl2(scale2)
    }, [scale2]);

    // Calculate the center of the mesh for proper pivot placement
    const geometry = nodes.T_Shirt_male.geometry;
    geometry.computeBoundingBox();
    const center = new THREE.Vector3();
    geometry.boundingBox.getCenter(center);
    geometry.center(); // Move geometry to the center

  return (
    <>
          <OrbitControls makeDefault />

          

          {/* <group key={stateString}> */}
          <mesh  geometry={nodes.T_Shirt_male.geometry}
          ref={meshRef}
              material={materials.lambert1}
              material-metalness={0.1}
              onContextMenu={handleContextMenu}
              dispose={null}>      

            {debug &&
            <group position={snap.frontLogoPosition} >
              <PivotControls
                scale={0.3}
                activeAxes={[true, true, true]}
                onDrag={(local) => {                  
                  const currentPosition = new THREE.Vector3(0,0.04,0.15)                  
                  const position = new THREE.Vector3()
                  const scale = new THREE.Vector3()
                  const quaternion = new THREE.Quaternion()
                  local.decompose(position, quaternion, scale)

                  const finalPos = currentPosition.add(position);
                  const rotation = new THREE.Euler().setFromQuaternion(quaternion)
              
                  setXYZ([finalPos.x, finalPos.y, finalPos.z])
                  setRot([rotation.x, rotation.y, rotation.z])

                  console.log(local)
                  // setScl([scale.x, scale.y, scale.z])
                }}
              />
            </group>
            }
            <Decal debug={debug} position={pos} rotation={rot} scale={scl} map={useTexture(image)} />

            {debug2 &&
            <group position={snap.frontLogoPosition2}>
              <PivotControls
                scale={0.3}
                activeAxes={[true, true, true]}
                onDrag={(local) => {
                  const currentPosition = new THREE.Vector3(0,-0.2,0.15)                  
                  const position = new THREE.Vector3()
                  const scale = new THREE.Vector3()
                  const quaternion = new THREE.Quaternion()
                  local.decompose(position, quaternion, scale)

                  const finalPos = currentPosition.add(position);
                  const rotation = new THREE.Euler().setFromQuaternion(quaternion)
              
                  setXYZ2([finalPos.x, finalPos.y, finalPos.z])
                  setRot2([rotation.x, rotation.y, rotation.z])
                  // setScl([scale.x, scale.y, scale.z])
                }}
              />
            </group>
            }
            <Decal debug={debug2} position={pos2} rotation={rot2} scale={scl2} map={useTexture(image2)} />

          </mesh>

          {showContextMenu && (
            <div
              style={{
                position: 'absolute',
                top: `${contextMenuPosition.y}px`,
                left: `${contextMenuPosition.x}px`,
                backgroundColor: 'white',
                border: '1px solid black',
                zIndex: 1000,
                padding: '10px'
              }}
            >
              <div onClick={() => handleSelectImage('image1')}>Select Image 1</div>
              <div onClick={() => handleSelectImage('image2')}>Select Image 2</div>
            </div>
          )}
      {/* </group> */}
    </>
  )
}

export default ShirtApp